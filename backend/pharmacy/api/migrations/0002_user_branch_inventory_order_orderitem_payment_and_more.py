# Generated by Django 5.0 on 2025-07-26 05:41

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.CharField(max_length=100, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('current_address', models.CharField(blank=True, max_length=200, null=True)),
                ('province', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('avatar_url', models.CharField(blank=True, max_length=200, null=True)),
                ('preferred_theme', models.CharField(blank=True, max_length=20, null=True)),
                ('role', models.CharField(max_length=50)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('branch_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=200)),
                ('province', models.CharField(blank=True, max_length=50, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'branches',
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('inventory_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('available_qty', models.IntegerField(default=0)),
                ('reserved_qty', models.IntegerField(default=0)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'inventory',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'orders',
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('order_item_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.IntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                'db_table': 'order_items',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('payment_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('paid_at', models.DateTimeField(auto_now_add=True)),
                ('insurance_included', models.BooleanField(default=False)),
                ('insurance_amount', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'payments',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('method_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('method_name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'payment_methods',
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('prescription_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image_url', models.CharField(blank=True, max_length=200, null=True)),
                ('classification', models.IntegerField()),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'prescriptions',
            },
        ),
        migrations.CreateModel(
            name='PrescriptionApproval',
            fields=[
                ('approval_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('decision', models.CharField(max_length=50)),
                ('comment', models.CharField(blank=True, max_length=500, null=True)),
                ('approved_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'prescription_approvals',
            },
        ),
        migrations.CreateModel(
            name='PrescriptionItem',
            fields=[
                ('prescription_items_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dosage_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unit', models.CharField(max_length=20)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                'db_table': 'prescription_items',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('product_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('category', models.CharField(blank=True, max_length=50, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True)),
                ('prescription', models.CharField(blank=True, max_length=50, null=True)),
                ('class_level', models.IntegerField(blank=True, null=True)),
                ('need_approval', models.BooleanField(default=False)),
                ('expiration_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'products',
            },
        ),
        migrations.CreateModel(
            name='StatusDimension',
            fields=[
                ('status_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('entity_type', models.CharField(max_length=50)),
                ('status_name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'status_dimension',
            },
        ),
        migrations.CreateModel(
            name='UserActivityLog',
            fields=[
                ('activity_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('time_spent_seconds', models.IntegerField()),
                ('points_earned', models.IntegerField(blank=True, null=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'user_activity_logs',
            },
        ),
        migrations.CreateModel(
            name='UserMedicalHistory',
            fields=[
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('condition', models.CharField(max_length=100)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('note', models.CharField(blank=True, max_length=500, null=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'user_medical_history',
            },
        ),
        migrations.CreateModel(
            name='UserPointTransaction',
            fields=[
                ('transaction_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('source', models.CharField(max_length=50)),
                ('points', models.IntegerField()),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'user_point_transactions',
            },
        ),
        migrations.CreateModel(
            name='UserProductView',
            fields=[
                ('view_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'user_product_views',
            },
        ),
        migrations.CreateModel(
            name='UserSearchLog',
            fields=[
                ('search_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('keyword', models.CharField(blank=True, max_length=100, null=True)),
                ('category', models.CharField(blank=True, max_length=50, null=True)),
                ('search_filters', models.CharField(blank=True, max_length=200, null=True)),
                ('results_count', models.IntegerField(blank=True, null=True)),
                ('searched_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'user_search_logs',
            },
        ),
        migrations.CreateModel(
            name='UserUiInteraction',
            fields=[
                ('interaction_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('component', models.CharField(max_length=50)),
                ('value', models.CharField(blank=True, max_length=200, null=True)),
                ('action', models.CharField(max_length=50)),
                ('occurred_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'user_ui_interactions',
            },
        ),
        migrations.DeleteModel(
            name='Medicine',
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['name'], name='branches_name_03c19a_idx'),
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['province'], name='branches_provinc_8df63f_idx'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='branch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='api.branch'),
        ),
        migrations.AddField(
            model_name='order',
            name='branch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='api.branch'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='orderitem',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.order'),
        ),
        migrations.AddField(
            model_name='payment',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.order'),
        ),
        migrations.AddIndex(
            model_name='paymentmethod',
            index=models.Index(fields=['method_name'], name='payment_met_method__237f46_idx'),
        ),
        migrations.AddField(
            model_name='payment',
            name='method',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='api.paymentmethod'),
        ),
        migrations.AddField(
            model_name='prescription',
            name='doctor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='doctor_prescriptions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='prescription',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_prescriptions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='order',
            name='prescription',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.prescription'),
        ),
        migrations.AddField(
            model_name='prescriptionapproval',
            name='approved_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='prescriptionapproval',
            name='prescription',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.prescription'),
        ),
        migrations.AddField(
            model_name='prescriptionitem',
            name='prescription',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.prescription'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['name'], name='products_name_6f9890_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='products_categor_fce6e6_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['price'], name='products_price_fe467e_idx'),
        ),
        migrations.AddField(
            model_name='prescriptionitem',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='api.product'),
        ),
        migrations.AddField(
            model_name='orderitem',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='api.product'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.product'),
        ),
        migrations.AddIndex(
            model_name='statusdimension',
            index=models.Index(fields=['entity_type'], name='status_dime_entity__8d0f57_idx'),
        ),
        migrations.AddIndex(
            model_name='statusdimension',
            index=models.Index(fields=['status_name'], name='status_dime_status__232dac_idx'),
        ),
        migrations.AddField(
            model_name='prescription',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='api.statusdimension'),
        ),
        migrations.AddField(
            model_name='payment',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='api.statusdimension'),
        ),
        migrations.AddField(
            model_name='order',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='api.statusdimension'),
        ),
        migrations.AddField(
            model_name='useractivitylog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usermedicalhistory',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userpointtransaction',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userproductview',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.product'),
        ),
        migrations.AddField(
            model_name='userproductview',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usersearchlog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='useruiinteraction',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='users_role_0ace22_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_created_6541e9_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionapproval',
            index=models.Index(fields=['prescription'], name='prescriptio_prescri_5ff52b_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionapproval',
            index=models.Index(fields=['approved_by'], name='prescriptio_approve_5d27cd_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionapproval',
            index=models.Index(fields=['approved_at'], name='prescriptio_approve_bd51ca_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionitem',
            index=models.Index(fields=['prescription'], name='prescriptio_prescri_61055d_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionitem',
            index=models.Index(fields=['product'], name='prescriptio_product_b93899_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['order'], name='order_items_order_i_26ad88_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['product'], name='order_items_product_a53db1_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['product'], name='inventory_product_58b6bd_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['branch'], name='inventory_branch__f2ebe8_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['updated_at'], name='inventory_updated_765284_idx'),
        ),
        migrations.AddIndex(
            model_name='prescription',
            index=models.Index(fields=['patient'], name='prescriptio_patient_408a4b_idx'),
        ),
        migrations.AddIndex(
            model_name='prescription',
            index=models.Index(fields=['doctor'], name='prescriptio_doctor__f3c41d_idx'),
        ),
        migrations.AddIndex(
            model_name='prescription',
            index=models.Index(fields=['status'], name='prescriptio_status__421f63_idx'),
        ),
        migrations.AddIndex(
            model_name='prescription',
            index=models.Index(fields=['submitted_at'], name='prescriptio_submitt_257e5f_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['order'], name='payments_order_i_b32b33_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['method'], name='payments_method__0d6494_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['status'], name='payments_status__d30eba_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['paid_at'], name='payments_paid_at_c989bb_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['user'], name='orders_user_id_4e08b8_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['branch'], name='orders_branch__e7e9b6_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status'], name='orders_status__9aad55_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['created_at'], name='orders_created_77e2b9_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivitylog',
            index=models.Index(fields=['user'], name='user_activi_user_id_6973f1_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivitylog',
            index=models.Index(fields=['recorded_at'], name='user_activi_recorde_b19549_idx'),
        ),
        migrations.AddIndex(
            model_name='usermedicalhistory',
            index=models.Index(fields=['user'], name='user_medica_user_id_c03f31_idx'),
        ),
        migrations.AddIndex(
            model_name='usermedicalhistory',
            index=models.Index(fields=['condition'], name='user_medica_conditi_94765e_idx'),
        ),
        migrations.AddIndex(
            model_name='usermedicalhistory',
            index=models.Index(fields=['recorded_at'], name='user_medica_recorde_e763ed_idx'),
        ),
        migrations.AddIndex(
            model_name='userpointtransaction',
            index=models.Index(fields=['user'], name='user_point__user_id_8d01fe_idx'),
        ),
        migrations.AddIndex(
            model_name='userpointtransaction',
            index=models.Index(fields=['recorded_at'], name='user_point__recorde_677159_idx'),
        ),
        migrations.AddIndex(
            model_name='userproductview',
            index=models.Index(fields=['user'], name='user_produc_user_id_6da621_idx'),
        ),
        migrations.AddIndex(
            model_name='userproductview',
            index=models.Index(fields=['product'], name='user_produc_product_098870_idx'),
        ),
        migrations.AddIndex(
            model_name='userproductview',
            index=models.Index(fields=['viewed_at'], name='user_produc_viewed__31c39c_idx'),
        ),
        migrations.AddIndex(
            model_name='usersearchlog',
            index=models.Index(fields=['user'], name='user_search_user_id_0d0e41_idx'),
        ),
        migrations.AddIndex(
            model_name='usersearchlog',
            index=models.Index(fields=['keyword'], name='user_search_keyword_8f6be4_idx'),
        ),
        migrations.AddIndex(
            model_name='usersearchlog',
            index=models.Index(fields=['searched_at'], name='user_search_searche_ae44ba_idx'),
        ),
        migrations.AddIndex(
            model_name='useruiinteraction',
            index=models.Index(fields=['user'], name='user_ui_int_user_id_e77941_idx'),
        ),
        migrations.AddIndex(
            model_name='useruiinteraction',
            index=models.Index(fields=['component'], name='user_ui_int_compone_ea5203_idx'),
        ),
        migrations.AddIndex(
            model_name='useruiinteraction',
            index=models.Index(fields=['occurred_at'], name='user_ui_int_occurre_dd3b3c_idx'),
        ),
    ]
